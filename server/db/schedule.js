const mongoose = require("mongoose");
const timeZone = require("mongoose-timezone");

const scheduleSchema = new mongoose.Schema({
  date: Date,
  fieldId: String,
  // Ho·∫∑c ki·ªÉu d·ªØ li·ªáu ph√π h·ª£p v·ªõi `fieldId` c·ªßa b·∫°n
  slots: [
    {
      hour: String,
      status: String,
      court: Number,
      price: Number, // Th√™m tr∆∞·ªùng gi√° ti·ªÅn
    },
  ],
});

// scheduleSchema.plugin(timeZone, { paths: ['date'] });

const Schedule = mongoose.model("Schedule", scheduleSchema);

Schedule.createInitialSchedule = async (fieldId, date) => {
  console.log("üöÄ ~ Schedule.createInitialSchedule= ~ date:", date)
  try {
    const hoursOfDay = [
      "5:00",
      "6:00",
      "7:00",
      "8:00",
      "9:00",
      "10:00",
      "11:00",
      "12:00",
      "13:00",
      "14:00",
      "15:00",
      "16:00",
      "17:00",
      "18:00",
      "19:00",
      "20:00",
      "21:00",
      "22:00",
      "23:00",
    ];

    const existingSchedule = await Schedule.findOne({ fieldId, date });

    if (!existingSchedule) {
      const initialSlots = hoursOfDay.map((hour) => ({
        hour,
        status: "available",
        court: "", // S·ªë s√¢n ban ƒë·∫ßu
        price: "", // Gi√° ti·ªÅn ban ƒë·∫ßuz
      }));

      const initialSchedule = new Schedule({
        date, // L∆∞u tr·ªØ ng√†y gi·ªù d∆∞·ªõi ƒë·ªãnh d·∫°ng ISO
        fieldId,
        slots: initialSlots,
      });

      await initialSchedule.save();
      console.log("T·∫°o l·ªãch c·ªë ƒë·ªãnh ban ƒë·∫ßu th√†nh c√¥ng");
    } else {
      console.log("L·ªãch cho ng√†y hi·ªán t·∫°i ƒë√£ t·ªìn t·∫°i.");
    }
  } catch (error) {
    console.error("L·ªói khi t·∫°o l·ªãch c·ªë ƒë·ªãnh: " + error);
  }
};

// ƒê·ªãnh nghƒ©a h√†m ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin c·ªßa m·ªôt gi·ªù tr√™n l·ªãch s√¢n
Schedule.updateSlotInfo = async (fieldId, date, hour, status, court, price) => {
  try {
    const existingSchedule = await Schedule.findOne({
      date: new Date(date),
      fieldId: fieldId,
    });

    if (existingSchedule) {
      const slotIndex = existingSchedule.slots.findIndex(
        (slot) => slot.hour === hour
      );

      if (slotIndex !== -1) {
        existingSchedule.slots[slotIndex].court = court;
        existingSchedule.slots[slotIndex].price = price;
        existingSchedule.slots[slotIndex].status = status;

        await existingSchedule.save();
        console.log("C·∫≠p nh·∫≠t th√¥ng tin l·ªãch s√¢n th√†nh c√¥ng");
      } else {
        console.log("Kh√¥ng t√¨m th·∫•y gi·ªù tr√™n l·ªãch s√¢n.");
      }
    } else {
      console.log("Kh√¥ng t√¨m th·∫•y l·ªãch cho ng√†y ƒë√£ cho.");
    }
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin l·ªãch s√¢n: " + error);
  }
};

module.exports = Schedule;
